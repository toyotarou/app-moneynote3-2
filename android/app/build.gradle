// android/app/build.gradle

plugins {
    id "com.android.application"
    id "org.jetbrains.kotlin.android"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProps = new Properties()
def localPropsFile = rootProject.file("local.properties")
if (localPropsFile.exists()) {
    localPropsFile.withReader("UTF-8") { localProps.load(it) }
}

def flutterVersionCode = (localProps["flutter.versionCode"] ?: "1").toInteger()
def flutterVersionName = localProps["flutter.versionName"] ?: "1.0"

android {
    namespace "com.example.money_note"

    compileSdk 35
    ndkVersion "27.0.12077973"

    defaultConfig {
        applicationId "com.example.money_note"
        minSdk       flutter.minSdkVersion
        targetSdk    35
        versionCode  flutterVersionCode
        versionName  flutterVersionName
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions { jvmTarget = "17" }

    sourceSets { main.java.srcDirs += "src/main/kotlin" }

    buildTypes {
        debug   { /* 追加があればここに */ }
        release {
            signingConfig signingConfigs.debug
            minifyEnabled false
            shrinkResources false
        }
    }
}

flutter { source "../.." }

dependencies {
    // 追加ライブラリがあればここへ
}

afterEvaluate {
    android.applicationVariants.all { variant ->
        if (variant.buildType.name == "debug") {
            def pkgTask = tasks.named("package${variant.name.capitalize()}")
            def copyTask = tasks.register("copy${variant.name.capitalize()}ApkToFlutter", Copy) {
                dependsOn pkgTask
                from pkgTask.get().outputDirectory
                include "*.apk"
                into "${rootProject.projectDir.parent}/build/app/outputs/flutter-apk"
            }
            variant.assembleProvider.get().finalizedBy(copyTask)
        }
    }
}
